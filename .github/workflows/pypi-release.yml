# .github/workflows/release.yml
name: PyPI Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'           # when a tag like v1.2.3 or v1.2.3.post2 is pushed
  workflow_dispatch:      # allow manual runs from the Actions UI

jobs:
  bump-and-tag:
    name: Bump version & (optionally) Tag
    # Only run on manual dispatch or [bump-*] pushes to main
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/heads/main') &&
        contains(github.event.head_commit.message, '[bump-')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write

    # ← Add these outputs, pointing at your detect + bump steps below
    outputs:
      mode: ${{ steps.mode.outputs.mode }}
      new_version: ${{ steps.bump.outputs.new_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python & Poetry
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install poetry

      - name: Detect bump mode
        id: mode
        run: |
          MSG="${{ github.event.head_commit.message }}"
          if [[ "$MSG" == *"[bump-release]"* ]]; then
            MODE=release
          else
            MODE=local
          fi
          echo "mode=$MODE" >> "$GITHUB_OUTPUT"
          echo "MODE=$MODE" >> "$GITHUB_ENV"
          echo "::notice:: Detected bump mode: $MODE"

      - name: Compute next post-release version
        id: bump
        run: |
          FULL=$(poetry version -s)
          UPSTREAM="${FULL%%.post*}"
          if [[ $FULL =~ \.post([0-9]+)$ ]]; then
            NEXT=$((BASH_REMATCH[1] + 1))
          else
            NEXT=1
          fi
          NEW="${UPSTREAM}.post${NEXT}"
          poetry version "$NEW"
          echo "new_version=$NEW" >> "$GITHUB_OUTPUT"
          echo "::notice:: Will bump to: $NEW"

      - name: Commit bumped version
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "Version ${{ steps.bump.outputs.new_version }}"

      - name: Tag release (only in release mode)
        if: env.MODE == 'release'
        run: |
          echo "Tagging v${{ steps.bump.outputs.new_version }}"
          git tag "v${{ steps.bump.outputs.new_version }}"

      - name: Push commit (always) and tag (only in release mode)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD
          if [ "${{ env.MODE }}" = "release" ]; then
            git push origin "v${{ steps.bump.outputs.new_version }}"
          fi

  publish:
    name: Build & Publish to PyPI
    needs: bump-and-tag
    if: needs.bump-and-tag.outputs.mode == 'release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout correct tag
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Poetry
        run: pip install poetry

      - name: Ensure checkout matches tag ref
        run: |
          git fetch --tags
          git checkout ${{ github.ref }}
          git log -1 --oneline
          grep version pyproject.toml

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tools
        run: pip install build twine

      - name: Ensure version correctness
        run: |
          EXPECT="${{ needs.bump-and-tag.outputs.new_version }}"
          ACTUAL=$(poetry version -s)

          echo "Expected: $EXPECT"
          echo "Actual:   $ACTUAL"

          if [ "$EXPECT" != "$ACTUAL" ]; then
            echo "::error:: Version mismatch! Expected '$EXPECT' but found '$ACTUAL'"
            exit 1
          fi
          echo "::error:: Test exit"
          exit 1

      - name: Build distributions
        run: python -m build

      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}         # e.g. 'refs/tags/v1.2.3' → the action strips 'refs/tags/'
          release_name: Release ${{ github.ref_name }}
          body: |
            **Release ${{ github.ref_name }}**

            This release was auto-generated.
          draft: false
          prerelease: false
          # generate_release_notes: true # auto-generate release notes. text from body will be prepended to the generated notes
