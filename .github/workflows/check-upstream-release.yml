name: Check and Sync Upstream

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      sync-needed: ${{ steps.detect.outputs.sync-needed }}
      upstream-version: ${{ steps.detect.outputs.upstream-version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install requests toml pyyaml packaging

      - name: Run check script
        id: detect
        run: |
          result=0
          output_file="$GITHUB_OUTPUT"
          upstream_output=$(python .github/scripts/check_upstream_release.py) || result=$?

          echo "$upstream_output"

          if [ "$result" -eq 42 ]; then
            echo "sync-needed=true" >> "$output_file"

            version=$(echo "$upstream_output" | sed -n 's/^Upstream version.*= *//p')
            echo "::notice::Extracted upstream version: $version"
            echo "upstream-version=$version" >> "$output_file"
          elif [ "$result" -eq 0 ]; then
            echo "sync-needed=false" >> "$output_file"
          else
            exit $result
          fi

  sync:
    needs: check-release
    if: needs.check-release.outputs.sync-needed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fork
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create sync branch with 3-way merge
        id: create-branch
        run: |
          set -euo pipefail

          BRANCH="sync-upstream-$(date +'%Y%m%d')"
          echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"

          git switch -c "$BRANCH" origin/main

          # Add remote for upstream if not already defined
          if ! git remote get-url upstream &>/dev/null; then
            git remote add upstream https://github.com/snakemake/snakemake-executor-plugin-slurm
          fi

          git fetch upstream
          git fetch origin

          # Get merge base between fork and upstream
          BASE_COMMIT=$(git merge-base origin/main upstream/main)
          echo "Using merge base: $BASE_COMMIT"

          # Restore your fork's .github/ workflows
          rm -rf .github
          git checkout origin/main -- .github/

          # === Define excluded paths relative to repo root ===
          EXCLUDES=(
            "TODO.md"
            "tests/Snakefile"
            "tests/tests.py"
            "tests/__pycache__"
            "tests/profiles"
          )

          # Track if anything changed
          MERGED=false

          # Traverse all paths in upstream repo
          UPSTREAM_FILES=$(git ls-tree -r --name-only upstream/main)

          for SRC in $UPSTREAM_FILES; do
            # Skip excluded files and folders
            for EXCLUDE in "${EXCLUDES[@]}"; do
              if [[ "$SRC" == "$EXCLUDE"* ]]; then
                continue 2
              fi
            done

            # Map slurm/ → cannon/ path
            if [[ "$SRC" == snakemake_executor_plugin_slurm/* ]]; then
              DEST=${SRC/snakemake_executor_plugin_slurm/snakemake_executor_plugin_cannon}
            else
              DEST=$SRC
            fi

            # Safety: skip if destination file does not exist in origin
            [ ! -f "$DEST" ] && continue

            echo "Merging $SRC → $DEST"

            # Set up temp files for 3-way merge
            TMP_BASE=base.py
            TMP_THEIRS=upstream.py
            TMP_MINE=mine.py

            git show "$BASE_COMMIT:$SRC" > "$TMP_BASE" || continue
            git show "upstream/main:$SRC" > "$TMP_THEIRS" || continue
            cp "$DEST" "$TMP_MINE"

            # Perform the 3-way merge in-place on mine
            if git merge-file --marker-size=30 "$TMP_MINE" "$TMP_BASE" "$TMP_THEIRS"; then
              echo "Merge succeeded for $DEST"
              cp "$TMP_MINE" "$DEST"
              MERGED=true
            else
              echo "::warning:: Conflict detected in $DEST"
              cp "$TMP_MINE" "$DEST"
              MERGED=true
            fi

            # Check if the merge changed the file
            if ! diff -q "$DEST" "${TMP_MINE}.orig" >/dev/null; then
              echo "::notice:: Detected changes in $DEST"
            fi

            # Clean up temp files
            rm -f "$TMP_BASE" "$TMP_THEIRS" "$TMP_MINE"
          done

          # Stage & commit if anything changed
          git add -A
          if git diff --cached --quiet || [ "$MERGED" = false ]; then
            echo "No changes to commit."
            echo "has-changes=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "Sync upstream changes via 3-way merge"
            echo "has-changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Show working changes
        if: steps.create-branch.outputs.has-changes == 'true'
        run: |
          echo "=== git status ==="
          git status
          echo "=== git diff (against origin/main) ==="
          git diff origin/main

      - name: Push sync branch
        if: steps.create-branch.outputs.has-changes == 'true'
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git push --set-upstream origin ${{ env.BRANCH }}

      - name: Create PR
        if: steps.create-branch.outputs.has-changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Waiting briefly to ensure GitHub registers the pushed branch..."
              sleep 15

          gh pr create \
            --base main \
            --head ${{ github.repository_owner }}:${{ env.BRANCH }} \
            --title "Sync with upstream release v${{ needs.check-release.outputs.upstream-version }}" \
            --body "Auto-created sync PR for upstream version v${{ needs.check-release.outputs.upstream-version }}"

      - name: Skip info (no commit to push)
        if: ${{ steps.create-branch.outputs.has-changes != 'true' }}
        run: echo "No changes staged, nothing to push or show."