name: Check Upstream and Notify

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      sync-needed: ${{ steps.detect.outputs.sync-needed }}
      upstream-version: ${{ steps.detect.outputs.upstream-version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install requests toml pyyaml packaging

      - name: Run check script
        id: detect
        run: |
          result=0
          output_file="$GITHUB_OUTPUT"
          upstream_output=$(python .github/scripts/check_upstream_release.py) || result=$?

          echo "$upstream_output"

          if [ "$result" -eq 42 ]; then
            echo "sync-needed=true" >> "$output_file"

            version=$(echo "$upstream_output" | sed -n 's/^Upstream version.*= *//p')
            echo "::notice::Extracted upstream version: $version"
            echo "upstream-version=$version" >> "$output_file"
          elif [ "$result" -eq 0 ]; then
            echo "sync-needed=false" >> "$output_file"
          else
            exit $result
          fi

  notify:
    needs: check-release
    if: needs.check-release.outputs.sync-needed == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: Define issue title
        id: title
        run: |
          echo "ISSUE_TITLE=Detected upstream release v${{ needs.check-release.outputs.upstream-version }}" >> "$GITHUB_ENV"

      - name: Check for existing issue
        id: issue-check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        run: |
          count=$(gh issue list \
            --repo harvardinformatics/snakemake-executor-plugin-cannon \
            --state open \
            --json title \
            --jq "map(select(.title == \"${{ env.ISSUE_TITLE }}\")) | length")
          echo "issue_exists=$count" >> "$GITHUB_OUTPUT"
          if [ "$count" -gt 0 ]; then
            echo "::notice:: Found $count existing issue(s) titled for version ${{ needs.check-release.outputs.upstream-version }}. Skipping issue creation."
          else
            echo "::notice:: Creating issue for new release: '${{ env.ISSUE_TITLE }}'"
          fi

      - name: Generate issue body file
        if: steps.issue-check.outputs.issue_exists == '0'
        run: |
          cat <<EOF | sed 's/^[[:space:]]*//' > issue_body.md
            #### Sync with upstream v${{ needs.check-release.outputs.upstream-version }}

            This issue was auto-generated on detection of a new upstream version. Perform the following to manually sync:

            \`\`\`bash
            git fetch upstream
            git checkout main
            git merge upstream/main
            #
            # Resolve any conflicts, if necessary
            #
            git add -A
            git commit -m "Merge remote-tracking branch 'upstream/main'"
            git push origin main
            \`\`\`

            Or using VS Code's command palette (Ctrl+Shift+P):

            1. Git: Fetch from… → choose upstream.
            2. Git: Merge Branch… → pick upstream/main.
            3. If there are conflicts, VS Code will show them in the editor; resolve, then commit and push. 
          EOF

      - name: Create issue
        if: steps.issue-check.outputs.issue_exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --repo harvardinformatics/snakemake-executor-plugin-cannon \
            --title "$ISSUE_TITLE" \
            --body-file issue_body.md \
            --label automated \
            --label upstream-sync \
            --assignee "${{ github.actor }}"

      # - name: Skip creating issue
      #   if: steps.issue-check.outputs.issue_exists != '0'
      #   run: echo "An open issue already exists for upstream v${{ needs.check-release.outputs.upstream-version }}. No new issue created."