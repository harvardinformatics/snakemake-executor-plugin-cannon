name: Check and Sync Upstream

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      sync-needed: ${{ steps.detect.outputs.sync-needed }}
      upstream-version: ${{ steps.detect.outputs.upstream-version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install requests toml pyyaml packaging

      - name: Run check script
        id: detect
        run: |
          result=0
          output_file="$GITHUB_OUTPUT"
          upstream_output=$(python .github/scripts/check_upstream_release.py) || result=$?

          echo "$upstream_output"

          if [ "$result" -eq 42 ]; then
            echo "sync-needed=true" >> "$output_file"

            version=$(echo "$upstream_output" | sed -n 's/^Upstream version.*= *//p')
            echo "::notice::Extracted upstream version: $version"
            echo "upstream-version=$version" >> "$output_file"
          elif [ "$result" -eq 0 ]; then
            echo "sync-needed=false" >> "$output_file"
          else
            exit $result
          fi

  sync:
    needs: check-release
    if: needs.check-release.outputs.sync-needed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fork
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create sync branch from upstream
        id: create-branch
        run: |
          BRANCH="sync-upstream-$(date +'%Y%m%d')"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

          # Add upstream and fetch to get upstream/main
          # Add and fetch upstream safely
          if ! git remote get-url upstream &>/dev/null; then
            git remote add upstream https://github.com/snakemake/snakemake-executor-plugin-slurm
          fi
          git fetch upstream

          # Create branch from upstream/main
          git checkout -b $BRANCH upstream/main

          # Fetch fork's main so we can restore its .github folder
          git fetch origin main

          # Remove all .github/ changes from upstream and restore from our fork (origin/main)
          rm -rf .github/
          git checkout origin/main -- .github/

          # Stage changes
          git add -A

          # Check and commit only if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "has-changes=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "Sync with upstream (excluding workflow files)"
            echo "has-changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Show staged changes (for debug)
        if: steps.create-branch.outputs.has-changes == 'true'
        run: git diff --cached --name-status

      - name: Push sync branch
        if: steps.create-branch.outputs.has-changes == 'true'
        run: git push origin ${{ env.BRANCH }}

      - name: Open PR
        if: steps.create-branch.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ github.event.repository.default_branch }}
          branch: ${{ env.BRANCH }}
          title: "Sync with upstream release v${{ needs.check-release.outputs.upstream-version }}"
          body: |
            This PR was auto-generated to sync with upstream version v${{ needs.check-release.outputs.upstream-version }}, excluding CI workflow changes.
          labels: |
            automated
            upstream-sync
          commit-message: "auto-sync: Sync with upstream release v${{ needs.check-release.outputs.upstream-version }}"

      - name: Skip info (no commit to push)
        if: ${{ steps.create-branch.outputs.has-changes != 'true' }}
        run: echo "Skip: No changes staged, nothing to push or show."